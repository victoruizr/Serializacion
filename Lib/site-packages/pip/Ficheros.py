import pickle
from builtins import list

from tkinter import *




class Clientes():
    def __init__(self,nombre,apellidos,telefono,idCliente):
        self.telefono=telefono
        self.nombre=nombre
        self.apellidos=apellidos
        self.idCliente=idCliente
    def pintar(self):
        return "{}-{}-{}-{}".format(self.idCliente, self.nombre, self.apellidos, self.telefono)

    def __str__(self):
        return"{}-{}-{}-{}".format(self.idCliente,self.nombre,self.apellidos,self.telefono)

    def getNombre(self):
        return self.nombre
    def getApellidos(self):
        return self.apellidos
    def getTelefono(self):
        return self.apellidos
    def getIdCliente(self):
        return self.idCliente
    def setNombre(self,nombre):
        self.nombre=nombre
    def setApellidos(self,apellidos):
        self.apellidos=apellidos
    def setTelefono(self,telefono):
        self.telefono=telefono
    def setIdCliente(self,idCliente):
        self.idCliente=idCliente







def camposVacios():
    ventana = Tk()
    ventana.geometry("400x300")
    ventana.title("Campos vacios")
    vacio = Label(ventana,text="Campos vacios")
    vacio.pack()


    ventana.mainloop()

def posicionNoValida():
    ventana = Tk()
    ventana.geometry("400x300")
    ventana.title("Posicion no valida")
    posicion = Label(ventana,text="Posicion no valida")
    posicion.pack()
    ventana.mainloop()


class ListaClientes:
    clientes=[]

    def __init__(self):
        try:
            listaDeClientes=open("fichero_clientes","ab+")
            listaDeClientes.seek(0)

            self.clientes=pickle.load(listaDeClientes)

            print("Cargados {} clientes".format(len(self.clientes)))
        except:
            print("Fichero vacio")
        finally:
            listaDeClientes.close()
            del(listaDeClientes)

    def guardarClientesFichero(self):
        listaDeClientes =open("fichero_clientes","wb")
        pickle.dump(self.clientes,listaDeClientes)
        listaDeClientes.close()
        del(listaDeClientes)


    def anadirClientes(self):

            ventana = Tk()
            ventana.geometry("400x300")
            ventana.title("Anadir Cliente")
            cajaNombre = Entry(ventana)
            cajaNombre.pack()
            cajaApellidos = Entry(ventana)
            cajaApellidos.pack()
            cajaTelefono = Entry(ventana)
            cajaTelefono.pack()


            def anadirCliente():
                numero=len(self.clientes)
                nombre = cajaNombre.get()
                apellidos = cajaApellidos.get()
                telefono = cajaTelefono.get()
                if nombre=="" or apellidos=="" or telefono=="" :
                    camposVacios()
                else:
                    numero += 1
                    cliente = Clientes(nombre, apellidos, telefono,numero)
                    self.clientes.append(cliente)
                    self.guardarClientesFichero()

                    #print(nombre,apellidos,telefono)

            botonAnadir = Button(ventana, text="Anadir",command=lambda:[anadirCliente(),ventana.destroy()] )
            botonAnadir.pack()

            ventana.mainloop()

    def borrarCliente(self):

        ventana = Tk()
        ventana.geometry("400x300")
        ventana.title("Borrar Cliente")
        cajaPosicion = Entry(ventana)
        cajaPosicion.pack()


        def borrarCliente():
            posicion = cajaPosicion.get()
            if posicion== "":
                camposVacios()
            else:
                if(int(posicion)<=len(self.clientes)):
                    self.clientes.pop(int(posicion))
                    self.guardarClientesFichero()
                    # print(nombre,apellidos,telefono)
                else:
                    posicionNoValida()



        botonBorrar = Button(ventana, text="Anadir", command=lambda: [borrarCliente(), ventana.destroy()])
        botonBorrar.pack()
        ventana.mainloop()

    def modificarClientes(self):
        ventana = Tk()
        ventana.geometry("400x300")
        ventana.title("Actualizar Cliente")
        idCli=Entry(ventana)
        idCli.pack()
        cajaNombre = Entry(ventana)
        cajaNombre.pack()
        cajaApellidos = Entry(ventana)
        cajaApellidos.pack()
        cajaTelefono = Entry(ventana)
        cajaTelefono.pack()


        def actualizarCliente():
            numero=0;
            nombre = cajaNombre.get()
            apellidos = cajaApellidos.get()
            telefono = cajaTelefono.get()
            id=int(idCli.get())
            #idCliente=
            #cliente = Clientes(nombre, apellidos, telefono)
            if nombre == "" or apellidos == "" or telefono == "":
                camposVacios()
            else:
                    CL = Clientes(nombre,apellidos,telefono,id)
                    self.clientes.pop(id-1)
                    self.clientes.insert(id-1,CL)
                    self.guardarClientesFichero()
        botonActualizar = Button(ventana, text="Actualizar", command=lambda: [actualizarCliente(), ventana.destroy()])
        botonActualizar.pack()

        ventana.mainloop()

       #for item in self.clientes:
       #    if(item.getNombre()=="victor"):
       #         print(str(item.getNombre()))


    def mostrarClientes(self):
        for item in self.clientes:
            print(item)

    def leerFicheroClientes(self):
        ficheroBinario = open("fichero_clientes","rb")
        lista=pickle.load(ficheroBinario)
        ficheroBinario.close()
        del(ficheroBinario)
        ventana = Tk()
        ventana.geometry("400x300")
        ventana.title("Listado clientes")
        cajaNombre = Text(ventana)
        datos=""
        for itemCliente in lista:
            datos=datos+itemCliente.pintar()+"\n"
        cajaNombre.insert(END,datos)
        cajaNombre.configure(state="disabled")
        cajaNombre.pack()
        ventana.mainloop()

listaClientes=ListaClientes()
listaClientes.anadirClientes()
listaClientes.anadirClientes()
listaClientes.anadirClientes()
listaClientes.borrarCliente()
listaClientes.leerFicheroClientes()
listaClientes.modificarClientes()
listaClientes.leerFicheroClientes()

#listaClientes.mostrarClientes()
